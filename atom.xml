<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黑铃铛</title>
  
  <subtitle>把每句&quot;我不会&quot;都改成&quot;我可以学&quot;</subtitle>
  <link href="https://huangwanling.gitee.io/ayla/atom.xml" rel="self"/>
  
  <link href="https://huangwanling.gitee.io/ayla/"/>
  <updated>2022-03-10T17:34:46.044Z</updated>
  <id>https://huangwanling.gitee.io/ayla/</id>
  
  <author>
    <name>Ayla</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题（三）</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2022-03-10T07:06:42.000Z</published>
    <updated>2022-03-10T17:34:46.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JS篇（一）"><a href="#一、JS篇（一）" class="headerlink" title="一、JS篇（一）"></a>一、JS篇（一）</h2><h5 id="1、堆栈内存"><a href="#1、堆栈内存" class="headerlink" title="1、堆栈内存"></a>1、堆栈内存</h5><p>堆：存储引用类型值的空间<br>栈：存储基本类型和指定代码的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">let</span> a = &#123;&#125;,b = <span class="string">&#x27;0&#x27;</span>,c = 0;</span><br><span class="line">    a[b] = <span class="string">&#x27;woaaa&#x27;</span>;</span><br><span class="line">    a[c] = <span class="string">&quot;asadc&quot;</span>;</span><br><span class="line">    console.log(a[b]);</span><br><span class="line">//答案：培训,一个堆中属性名不能重复，且一般是字符串，数字属性名==字符串属性名 </span><br></pre></td></tr></table></figure><p><img src="/ayla/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220311004858837.png" alt="image-20220311004858837"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = &#123;&#125;,b = Symbol(<span class="string">&#x27;1&#x27;</span>),c = Symbol(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">a[b] = <span class="string">&#x27;珠峰&#x27;</span>；</span><br><span class="line">a[c] = <span class="string">&#x27;培训&#x27;</span>；</span><br><span class="line">console.log(a[b]);</span><br><span class="line">//答案：珠峰，Symbol的特点，都是唯一的</span><br><span class="line">//一个对象的属性名可以是Symbol,undefined,null,boolean... </span><br><span class="line">//自己实现一个Symbol(深入问)</span><br></pre></td></tr></table></figure><p>不管对象里存的是什么，执行.toString方法后都是[object Object]<br><img src="/ayla/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220311010133771.png" alt="image-20220311010133771"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = &#123;&#125;,</span><br><span class="line">    b = &#123;</span><br><span class="line">        n: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    c = &#123;</span><br><span class="line">        m: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">a[b] = <span class="string">&#x27;珠峰&#x27;</span>;</span><br><span class="line">a[c] = <span class="string">&#x27;培训&#x27;</span>;</span><br><span class="line">console.log(a[b]);</span><br><span class="line">//培训，key会转化成字符串[Obejct object]</span><br><span class="line">//==&gt; Object.protopyte.toString / valueOf</span><br></pre></td></tr></table></figure><h5 id="2、闭包作用域"><a href="#2、闭包作用域" class="headerlink" title="2、闭包作用域"></a>2、闭包作用域</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">test</span> = (<span class="keyword">function</span>(i)&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">alert (i*=2)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(2);</span><br><span class="line"><span class="built_in">test</span>(5)</span><br><span class="line">//答案：‘4’，alert弹出的会转化成字符串</span><br><span class="line">//闭包：该销毁的不销毁才叫泄露</span><br></pre></td></tr></table></figure><p><img src="/ayla/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220311012113778.png" alt="image-20220311012113778"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = 0,b = 0;</span><br><span class="line"><span class="keyword">function</span> A(a)&#123;</span><br><span class="line">A = <span class="keyword">function</span> (b)&#123;</span><br><span class="line">alert(a + b++);</span><br><span class="line">&#125;;</span><br><span class="line">alert(a++);</span><br><span class="line">&#125;</span><br><span class="line">A(1);</span><br><span class="line">A(2);</span><br><span class="line">//答案：‘1’  ‘4’</span><br></pre></td></tr></table></figure><p><img src="/ayla/ayla/2022/03/10/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png.png" alt="image-20200602122452877"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、JS篇（一）&quot;&gt;&lt;a href=&quot;#一、JS篇（一）&quot; class=&quot;headerlink&quot; title=&quot;一、JS篇（一）&quot;&gt;&lt;/a&gt;一、JS篇（一）&lt;/h2&gt;&lt;h5 id=&quot;1、堆栈内存&quot;&gt;&lt;a href=&quot;#1、堆栈内存&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端面试题（二）</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-03-09T15:27:02.000Z</published>
    <updated>2022-03-10T07:08:09.597Z</updated>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;    前端经典面试题，视频来源B站<a href="https://www.bilibili.com/video/BV1ek4y1r7GT?from=search&amp;seid=3043085217816960051&amp;spm_id_from=333.337.0.0%EF%BC%8C">https://www.bilibili.com/video/BV1ek4y1r7GT?from=search&amp;seid=3043085217816960051&amp;spm_id_from=333.337.0.0，</a> 参考博客<a href="https://blog.csdn.net/mus123/article/details/106499506">https://blog.csdn.net/mus123/article/details/106499506</a>   &#x3D;&#x3D;</p><span id="more"></span><h2 id="一、CSS篇（一）"><a href="#一、CSS篇（一）" class="headerlink" title="一、CSS篇（一）"></a>一、CSS篇（一）</h2><h5 id="1、标签语义化：合理的标签干合适的事情"><a href="#1、标签语义化：合理的标签干合适的事情" class="headerlink" title="1、标签语义化：合理的标签干合适的事情"></a>1、标签语义化：合理的标签干合适的事情</h5><p><img src="http://tva1.sinaimg.cn/large/6929716cly1h042falydej20im0k67ak.jpg" alt="2022-03-09_234942.png"></p><blockquote><p>块级（display：block）：div 、p、h1~h6、hr、ul、ol、li、dl、dd、form、table、header、footer、main、nav、sector、arcitcle、pre、table、tbody、thead、th、tr、tfoot<br>行级（display：inline）：a、span、small、strong、em、i、code、<br>行内块（display：inline-block）：img、input</p></blockquote><blockquote><p>区别：<br>1.行内元素与块级元素可以相互转换，通过修改display属性值来切换块级元素和行内元素，行内元素display：inline，块级元素display：block。<br>2.行内元素和其他行内元素都会在一条水平线上排列，都是在同一行的；块级元素却总是会在新的一行开始排列，各个块级元素独占一行，垂直向下排列，若想使其水平方向排序，可使用左右浮动（float：left&#x2F;right）让其水平方向排列。<br>3.行内元素不可以设置宽高，宽度高度随文本内容的变化而变化，但是可以设置行高（line-height），同时在设置外边距margin上下无效，左右有效，内填充padding上下无效，左右有效；块级元素可以设置宽高，并且宽度高度以及外边距，内填充都可随意控制。<br>4.块级元素可以包含行内元素和块级元素，还可以容纳内联元素和其他元素；行内元素不能包含块级元素，只能容纳文本或者其他行内元素。</p></blockquote><blockquote><p>display还有none（隐藏dom）、flex（弹性）、table（表）<br><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220310145110322.png" alt="image-20220310145110322"><br>让一个元素隐藏：display：none、visibility：hidden、ocpacity（透明度，取值从0.0~1.0）：0、兼容的filter :filter:alpha(opacity&#x3D;number)<br>filter滤镜：对比度、饱和度、阴影、色相、透明度</p></blockquote><blockquote><p>display：flex 响应式、兼容性</p></blockquote><h5 id="2、盒子水平垂直居中方案（5种）"><a href="#2、盒子水平垂直居中方案（5种）" class="headerlink" title="2、盒子水平垂直居中方案（5种）"></a>2、盒子水平垂直居中方案（5种）</h5><p>（回答话术：项目中经常遇到这种需求，最开始xxx，喜欢用flex，后来发现xxx，在xx博客上突然发现xx更好，xx解决了兼容性）</p><p>1、定位1（需要知道父的宽高）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">           position: relative;</span><br><span class="line">       &#125;</span><br><span class="line">       .box &#123;</span><br><span class="line">           position: absolute;</span><br><span class="line">           left: 50%;</span><br><span class="line">           bottom: 50%;</span><br><span class="line">           margin-left: -50px;</span><br><span class="line">           margin-top: -25px;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>2、定位2（需要父亲有宽高限定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、定位3：不需要父有具体宽高限制（兼容性不如定位1、2方法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、display:flex(ie10+)：移动端常用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、JS实现（获取当前屏幕、盒子宽高）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> HTML = document.documentElement,</span><br><span class="line">     winW = HTML.clientWidth,</span><br><span class="line">     winH = HTML.clientHeight,</span><br><span class="line">     boxW = box.offsetWidth,</span><br><span class="line">     boxH = box.offsetHeight;</span><br><span class="line"> box.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line"> box.style.left = (winW - boxW) / 2 + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"> box.style.top = (winH - boxH) / 2 + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><p>6、固定宽高的父级 display：table-cell 子级inline-block</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    height: 600px;</span><br><span class="line">    width: 600px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、盒子模型（从里到外：content、padding、border、margin）"><a href="#3、盒子模型（从里到外：content、padding、border、margin）" class="headerlink" title="3、盒子模型（从里到外：content、padding、border、margin）"></a>3、盒子模型（从里到外：content、padding、border、margin）</h5><blockquote><p> 标准盒模型（content-box）、ie怪异盒模型（border-box）、flex弹性伸缩盒模型、column多列盒模型</p></blockquote><p>面试话术：其实我们最常用的是标准盒模型也就是boxing-sizing:content-box,width和height指的是内容的宽高而不是盒子的宽高，盒子的实际宽高还要加上margin、border和padding，但这种模型在实际中可能会存在一个问题就假设宽高设置100×100，但这时只要加上border盒子的宽高就会改变，导致总是要手动修改宽高或者调其他样式，后来css3提供了一种新的box-sizing:border-box,这个盒子模型有一个优点就是不管怎么调宽高盒子的大小就还是100*×100，不管怎么调border调padding盒子都会通过缩放内容使其宽高保持100×100，不用再手动调宽高，写样式就会比较方便</p><blockquote><p>flex弹性伸缩盒模型:<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png.png" alt="img"><br>标准盒模型：<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220310132844558.png" alt="image-20220310132844558"><br>ie怪异盒模型:<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220310133137183.png" alt="image-20220310133137183"><br>column多列盒模型:<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-16468904369112.png" alt="img"></p></blockquote><h5 id="4、几大经典布局-左右固定中间自适应"><a href="#4、几大经典布局-左右固定中间自适应" class="headerlink" title="4、几大经典布局(左右固定中间自适应)"></a>4、几大经典布局(左右固定中间自适应)</h5><p>圣杯布局<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-16468916349304.png" alt="image-20200602113055173"></p><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-16468916817416.png" alt="image-20200602111514307"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  padding:0 200px;</span><br><span class="line">  height:100%;</span><br><span class="line">&#125;</span><br><span class="line">html,body&#123;</span><br><span class="line">  height:100%;</span><br><span class="line">  overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  min-height:200px;</span><br><span class="line">  background:lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.center&#123;</span><br><span class="line">  width:100%;</span><br><span class="line">  min-height:400px;</span><br><span class="line">  background:lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right,.center&#123; </span><br><span class="line">   <span class="built_in">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">   margin-left:-100%;</span><br><span class="line">   position:relative;</span><br><span class="line">   left:-200px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">   margin-right:-200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双飞翼布局:</p><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-16468923801848.png" alt="image-20200602113022455"></p><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-164689240039010.png" alt="image-20200602111550553"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">           height:100%;</span><br><span class="line">           overflow: hidden;</span><br><span class="line">       &#125;</span><br><span class="line">       .container,.left,.right&#123;</span><br><span class="line">           <span class="built_in">float</span>:left;</span><br><span class="line">       &#125;</span><br><span class="line">       .container&#123;</span><br><span class="line">           width:100%;</span><br><span class="line">       &#125;</span><br><span class="line">       .container .center&#123;</span><br><span class="line">           margin: 0 200px;</span><br><span class="line">           min-height: 400px;</span><br><span class="line">           background-color: lightblue;</span><br><span class="line">       &#125;</span><br><span class="line">       .left,.right&#123;</span><br><span class="line">           width: 200px;</span><br><span class="line">           min-height: 200px;</span><br><span class="line">           background-color: aqua;</span><br><span class="line">           /* display: inline-block; */</span><br><span class="line">       &#125;</span><br><span class="line">       .left&#123;</span><br><span class="line">           margin-left:-100%;</span><br><span class="line">       &#125;</span><br><span class="line">       .right&#123;</span><br><span class="line">          margin-left: -200px;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>另一种方法:flex<img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-164689399881412.png" alt="image-20200602113144394"></p><p>另一种方法:定位</p><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-164689405764614.png" alt="image-20200602113422644"><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/format,png-164689408472016.png" alt="image-20200602113433438"></p><h5 id="5、移动端响应式布局开发的三大方案"><a href="#5、移动端响应式布局开发的三大方案" class="headerlink" title="5、移动端响应式布局开发的三大方案"></a>5、移动端响应式布局开发的三大方案</h5><p>*媒体查询（一套）  \     *rem（应用于两套 中的移动端）\    flex    \   vh&#x2F;vw</p><h5 id="6、课后作业"><a href="#6、课后作业" class="headerlink" title="6、课后作业"></a>6、课后作业</h5><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220310143952934.png" alt="image-20220310143952934"></p><p><img src="/ayla/ayla/2022/03/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/Study_Vue/Vue(视频学习资料)/img/image-20220310144333198.png" alt="image-20220310144333198"></p><blockquote><p>z-index:建立不同的文档流不同的层级,脱离文档流:浮动和定位(transform变形类似脱离文档流)</p><p>5、第二种渲染性能高,    CSS 浏览器的渲染机制是选择器从右向左查询</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;#x3D;&amp;#x3D;    前端经典面试题，视频来源B站&lt;a href=&quot;https://www.bilibili.com/video/BV1ek4y1r7GT?from=search&amp;amp;seid=3043085217816960051&amp;amp;spm_id_from=333.337.0.0%EF%BC%8C&quot;&gt;https://www.bilibili.com/video/BV1ek4y1r7GT?from=search&amp;amp;seid=3043085217816960051&amp;amp;spm_id_from=333.337.0.0，&lt;/a&gt; 参考博客&lt;a href=&quot;https://blog.csdn.net/mus123/article/details/106499506&quot;&gt;https://blog.csdn.net/mus123/article/details/106499506&lt;/a&gt;   &amp;#x3D;&amp;#x3D;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>supermarket项目注意事项（二）</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/03/09/supermarket%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/03/09/supermarket%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-03-09T05:47:45.000Z</published>
    <updated>2022-03-09T09:25:17.780Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、上拉加载更多数据："><a href="#1、上拉加载更多数据：" class="headerlink" title="1、上拉加载更多数据："></a>1、上拉加载更多数据：</h5><p>①先监听什么时候滚动到底部，在scroll.vue中监听②监听到滚动到底部后用子传父组件通信办法将scroll中的自定义事件<code>this.$emit(&#39;pullingUp&#39;)</code>传到父组件中③父组件监听事件并创建一个loadMore()方法④<code>loadMore() &#123; this.getHomeGoods(this.currentType); &#125;</code>，getHomeGoods（）封装了tabControl三个按钮需要传输的数据</p><span id="more"></span><h5 id="2、tabControl的吸顶效果实现："><a href="#2、tabControl的吸顶效果实现：" class="headerlink" title="2、tabControl的吸顶效果实现："></a>2、tabControl的吸顶效果实现：</h5><p>1、必需知道滚动到多少时开始有吸顶效果：获取tabControl的offsetTop(获取当前元素定位的父元素位置 )<br>2、所有组件都有一个属性$el：用于获取组件里面的元素<br><img src="http://tva1.sinaimg.cn/large/6929716cly1h03nukatq4j20lh09eq5f.jpg" alt="offsetTop.png"></p><h5 id="3、监听滚动，动态的改变tabControl的样式"><a href="#3、监听滚动，动态的改变tabControl的样式" class="headerlink" title="3、监听滚动，动态的改变tabControl的样式"></a>3、监听滚动，动态的改变tabControl的样式</h5><p><img src="http://tva1.sinaimg.cn/large/6929716cly1h03nxab91fj20jq07d0va.jpg" alt="改变tabcontrol样式.png"></p><h5 id="4、在首页跳转到其他页面后再回去首页重新加载的问题"><a href="#4、在首页跳转到其他页面后再回去首页重新加载的问题" class="headerlink" title="4、在首页跳转到其他页面后再回去首页重新加载的问题"></a>4、在首页跳转到其他页面后再回去首页重新加载的问题</h5><p>  让home保持原有的状态，不随意销毁掉：keep-alive</p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;1、上拉加载更多数据：&quot;&gt;&lt;a href=&quot;#1、上拉加载更多数据：&quot; class=&quot;headerlink&quot; title=&quot;1、上拉加载更多数据：&quot;&gt;&lt;/a&gt;1、上拉加载更多数据：&lt;/h5&gt;&lt;p&gt;①先监听什么时候滚动到底部，在scroll.vue中监听②监听到滚动到底部后用子传父组件通信办法将scroll中的自定义事件&lt;code&gt;this.$emit(&amp;#39;pullingUp&amp;#39;)&lt;/code&gt;传到父组件中③父组件监听事件并创建一个loadMore()方法④&lt;code&gt;loadMore() &amp;#123; this.getHomeGoods(this.currentType); &amp;#125;&lt;/code&gt;，getHomeGoods（）封装了tabControl三个按钮需要传输的数据&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端面试题（一）</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/03/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/03/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-03-08T04:50:27.000Z</published>
    <updated>2022-03-09T07:30:23.232Z</updated>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;tips:自己学了快三个月的前端知识，前端三剑客和vue都学过了，但还没有做过系统的复习，金三银四正在开展中，目前正在加快速度复习基础知识点和准备简历&#x3D;&#x3D;</p><span id="more"></span><h3 id="一、HTML篇（一）"><a href="#一、HTML篇（一）" class="headerlink" title="一、HTML篇（一）"></a>一、HTML篇（一）</h3><h4 id="1、说一下http和https"><a href="#1、说一下http和https" class="headerlink" title="1、说一下http和https"></a>1、说一下http和https</h4><p>http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传 输协议，它可以使浏览器更加高效，使网络传输减少。 https: 是以安全为目标的 HTTP 通道，简单讲是 HTTP的安全版，即 HTTP 下加入 SSL层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。https 协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。</p><h4 id="2、说一下http和https的区别"><a href="#2、说一下http和https的区别" class="headerlink" title="2、说一下http和https的区别"></a>2、说一下http和https的区别</h4><p>http 传输的数据都是未加密的，也就是明文的，网景公司设置了 SSL 协议来对 http 协议 传输的数据进行加密处理，简单来说 https 协议是由 http 和 ssl 协议构建的可进行加密传 输和身份认证的网络协议，比 http 协议的安全性更高。 主要的区别如下： Https 协议需要 ca 证书，费用较高。 http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。 使用不同的链接方式，端口也不同，一般而言，http 协议的端口为 80，https 的端口为 443 http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传 输、身份认证的网络协议，比 http 协议安全。</p><h4 id="3、src和href的区别"><a href="#3、src和href的区别" class="headerlink" title="3、src和href的区别"></a>3、src和href的区别</h4><p>src ⽤于替换当前元素，href ⽤于在当前⽂档和引⽤资源之间确⽴联系。<br>src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌⼊到⽂档中当前标签所在位置；在请求 src 资源时会将其指向的资源下载并应⽤到⽂档内，例如 js 脚本，img 图⽚和 frame 等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，图⽚ 和框架等元素也如此，类似于将所指向资源嵌⼊当前标签内。这也是为什么将js 脚本放在底部⽽不是头部。<br>href 指向⽹络资源所在位置，建⽴和当前元素（锚点）或当前⽂档 （链接）之间的链接，在文档中添加href比如<link href="common.css" rel="stylesheet">,浏览器就会识别该文档为css文件然后并行下载资源但不会停止对当前文档的处理，这也是为 什么建议使⽤ link ⽅式来加载 css，⽽不是使⽤@import ⽅式。</p><h4 id="4、HTML语义化的理解"><a href="#4、HTML语义化的理解" class="headerlink" title="4、HTML语义化的理解"></a>4、HTML语义化的理解</h4><p>语义化是根据内容的结构化区选择合适的标签，像h5提供的语义化标签有<code>&lt;nav&gt;&lt;header&gt;&lt;fooyer&gt;&lt;main&gt;&lt;section&gt;</code>等等，对开发者友好，增强了代码的可读性，结构更加清晰，开发者能清晰的看出⽹⻚的结构， 便于团队的开发与维护。</p><h4 id="5、DOCTYPE-⽂档类型-的作⽤"><a href="#5、DOCTYPE-⽂档类型-的作⽤" class="headerlink" title="5、DOCTYPE(⽂档类型) 的作⽤"></a>5、DOCTYPE(⽂档类型) 的作⽤</h4><p>DOCTYPE是HTML5中⼀种标准通⽤标记语⾔的⽂档类型声明，它的⽬的是告诉浏览器（解析器）应该 以什么样（html或xhtml）的⽂档类型定义来解析⽂档，不同的渲染模式会影响浏览器对 CSS 代码甚 ⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。</p><h4 id="6、script标签中defer和async的区别"><a href="#6、script标签中defer和async的区别" class="headerlink" title="6、script标签中defer和async的区别"></a>6、script标签中defer和async的区别</h4><p>如果没有defer或async属性，浏览器会⽴即加载并执⾏相应的脚本。它不会等待后续加载的⽂档元素， 读取到就会开始加载和执⾏，这样就阻塞了后续⽂档的加载。defer 和 async属性都是去异步加载外部的JS脚本⽂件，它们都不会阻塞⻚⾯的解析，其区别如下： 执⾏顺序：多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺 序执⾏； 脚本是否并⾏执⾏：async属性，表示后续⽂档的加载和执⾏与js脚本的加载和执⾏是并⾏进⾏的， 即异步执⾏；defer属性，加载后续⽂档的过程和js脚本的加载(此时仅加载不执⾏)是并⾏进⾏的(异 步)，js脚本需要等到⽂档所有元素解析完成之后才执⾏，DOMContentLoaded事件触发执⾏之 前。</p><h4 id="7、常用的meta标签"><a href="#7、常用的meta标签" class="headerlink" title="7、常用的meta标签"></a>7、常用的meta标签</h4><p>meta 标签由 name 和 content 属性定义，⽤来描述⽹⻚⽂档的属性<br>charset ，⽤来描述HTML⽂档的编码类型：<br>keywords ，⻚⾯关键词：<br>description ，⻚⾯描述<br>refresh ，⻚⾯重定向和刷新：<br>viewport ，适配移动端，可以控制视⼝的⼤⼩和⽐例：</p><h4 id="8、H5有哪些更新"><a href="#8、H5有哪些更新" class="headerlink" title="8、H5有哪些更新"></a>8、H5有哪些更新</h4><p>1、语义化标签（<code>&lt;nav&gt;&lt;header&gt;&lt;fooyer&gt;&lt;main&gt;&lt;section&gt;</code>）<br>2、媒体标签：<br> audio：⾳频、video：视频、source标签（因为浏览器对视频格式⽀持程度不⼀样，为了能够兼容不同的浏览器，可以通过source来指定视频源）<br> 3、dom查询操作：<br> document.querySelector() document.querySelectorAll() 它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)<br> 4、web存储：<br> HTML5 提供了两种在客户端存储数据的新⽅法： localStorage - 没有时间限制的数据存储 sessionStorage - 针对⼀个 session 的数据存储<br> 5、input标签新增了属性：placeholder、autocomplete、autofocus、required</p><h4 id="9、⾏内元素有哪些？块级元素有哪些？-空-void-元素有那些？"><a href="#9、⾏内元素有哪些？块级元素有哪些？-空-void-元素有那些？" class="headerlink" title="9、⾏内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>9、⾏内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h4><p> ⾏内元素有： a b span img input select strong ；<br> 块级元素有： div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p ；<br> 常⻅的空元素有：<code>&lt;br&gt;、&lt;hr&gt; 、 &lt;img&gt; 、 &lt;input&gt; 、 &lt;link&gt; 、 &lt;meta&gt; </code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;#x3D;&amp;#x3D;tips:自己学了快三个月的前端知识，前端三剑客和vue都学过了，但还没有做过系统的复习，金三银四正在开展中，目前正在加快速度复习基础知识点和准备简历&amp;#x3D;&amp;#x3D;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>supermarket项目注意事项</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/03/08/supermarket%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/03/08/supermarket%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2022-03-07T17:35:42.000Z</published>
    <updated>2022-03-09T05:21:07.629Z</updated>
    
    <content type="html"><![CDATA[<p>1、导入tabbar时一直不能显示下方导航栏和图标，路径问题，需要加@&#x2F;<br>2、不可以对插槽做直接布局，eg：错误示范 <code>&lt;slot class = &quot;布局&quot;&gt;&lt;/slot&gt;</code>，正确示范 <code>&lt;div class = &quot;布局&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</code></p><span id="more"></span><p>3、首页请求数据时，不直接在Home.vue中封装，而是在network文件夹中新添一个home.js用来封装首页请求的数据，即不要在Home.vue中直接引用request,以下home.js代码示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; request &#125; from <span class="string">&quot;./request&quot;</span>;</span><br><span class="line">  <span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">getHomeMultidata</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、轮播图封装成组件，并用index.js导出组件，在HomeSwiper.vue中导入时只需写<code>import &#123;Swiper, SwiperItem&#125; from &quot;@/components/common//swiper&quot;;</code><br>5、在对轮播图使用v-for时报错“Custom elements in iteration require ‘v-bind:key’ directives.”，原因时vue规定使用v-for条件渲染时必须设置一个key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper&gt;</span><br><span class="line">      &lt;swiper-item  v-for=<span class="string">&quot;(item,key) in banners&quot;</span> :key=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">       &lt;a :href=<span class="string">&quot;item.link&quot;</span>&gt;</span><br><span class="line">         &lt;img :src=<span class="string">&quot;item.image&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">       &lt;/a&gt;</span><br><span class="line">      &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br></pre></td></tr></table></figure><p>6、项目中组件使用：导入、注册、使用（在template模板中）<br>7、组件如果要复用，只是在不同页面只是文字不同，样式都相同则不建议用插槽<br>8、tabcontrol下的数据比较复杂，点击不同按钮请求不同按钮对应的数据（流行、新款、精选），此时需要设计合理的数据结构，创建一个变量goods存储三个按钮对应的数据，当点击哪个按钮就想办法将对应的数据传到页面显示出来<br><img src="http://tva1.sinaimg.cn/large/6929716cly1h02dibkreoj20lh09njt1.jpg" alt="tabcontrol数据结构图.png"><br>9、vue脚手架原生的滚动：在页面内容超过可显示范围则可自动滚动，通过在Vue中封装一个scroll组件，并安装better-scroll<br>10、在Vue中想快速定位到某个标签，给标签添加一个ref属性，ref如果绑定在组件中，通过<strong>this.$refs.refname</strong>获取到的是一个组件对象，ref如果绑定在普通元素（标签)中，通过<strong>this.$refs.refname</strong>获取到的是一个元素对象。<br>11、不想让高度被内容撑开，高度单位可以设置为vh<br>12、组件不能直接监听原生事件，如果想监听必须加上一个原生修饰符native,eg:<code>&lt;back-top @click.native=&quot;backClick&quot;&gt;&lt;/back-top&gt;</code><br>13、better-scroll中的position监听不到（为解决）<br>14、Vuex可以拿到程序的所有应用状态，事件总线跟Vuex的功能很像，但他不是管理状态的，而是用来监听事件的，在组件里<code>this.$bus.emit(&#39;aaa&#39;)</code>,这里的aaa事件就是发送到事件总线里的，组件里<code>this.$bus.on(&#39;aaa&#39;，function)</code>,就是在组件里监听aaa事件,但程序里默认没有$bus,需要在main.js里声明<code>Vue.prototype.$bus = new Vue()</code><br>15、解决首页中Better-Scroll可滚动区域的问题：</p><h5 id="Better-Scroll在决定有多少区域可以滚动时是根据scrollerHeight属性决定"><a href="#Better-Scroll在决定有多少区域可以滚动时是根据scrollerHeight属性决定" class="headerlink" title="Better-Scroll在决定有多少区域可以滚动时是根据scrollerHeight属性决定"></a>Better-Scroll在决定有多少区域可以滚动时是根据scrollerHeight属性决定</h5><p>  scrollerHeight属性是根据放在Better-Scroll的content中的子组件的高度<br>  但是我们的首页中，刚开始在计算scrollerHeight属性时是没有将图片计算在内的<br>  所以，计算出来的告诉是错误的<br>  后来图片加载进来之后有了新的高度但是scrollerHeight属性并没有进行更新<br>  所以滚动出现了问题</p><h5 id="如何解决这个问题了"><a href="#如何解决这个问题了" class="headerlink" title="如何解决这个问题了?"></a>如何解决这个问题了?</h5><p>  监听每一张图片是否加载完成，只要有一张图片加载完成了，执行一次refresh(）<br>  如何监听图片加载完成了?<br>  原生的js监听图片:img.onload&#x3D;function(）<br>  Vue中监听:@load&#x3D;’方法‘<br>  调用scroll的refresh()</p><h5 id="如何将GoodsListltem-vue中的事件传入到Home-vue中"><a href="#如何将GoodsListltem-vue中的事件传入到Home-vue中" class="headerlink" title="如何将GoodsListltem.vue中的事件传入到Home.vue中"></a>如何将GoodsListltem.vue中的事件传入到Home.vue中</h5><p>  因为涉及到非父子组件的通信，所以这里我们选择了事件总线<br>  bus-&gt;总线<br>  Vue.prototype.$bus &#x3D; new Vue()<br>  this.bus.emit(‘事件名称’，参数)<br>  this.bus.on(‘事件名称’，回调函数(参数))<br>16、对于refresh非常频繁的问题进行防抖操作<br>  防抖debounce&#x2F;节流throttle<br>  防抖函数起作用的过程：<br>    ①如果我们直接执行refresh那么refresh函数会被执行30次.<br>    ②可以将refresh函数传入到debounce函数中，生成一个新的函数<br>    ③之后在调用非常频的时候，就使用新生成的函数.<br>    ④而新生成的函数，并不会非常频繁的调用，如果下一次执行来的非常快，那么会将上一次取消</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debounce(func,delay)&#123;</span><br><span class="line">      <span class="built_in">let</span> timer = null;</span><br><span class="line">      <span class="built_in">return</span> <span class="keyword">function</span>(...args)&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            func.apply(this,args)</span><br><span class="line">        &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、导入tabbar时一直不能显示下方导航栏和图标，路径问题，需要加@&amp;#x2F;&lt;br&gt;2、不可以对插槽做直接布局，eg：错误示范 &lt;code&gt;&amp;lt;slot class = &amp;quot;布局&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt;，正确示范 &lt;code&gt;&amp;lt;div class = &amp;quot;布局&amp;quot;&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello MyBlog</title>
    <link href="https://huangwanling.gitee.io/ayla/2022/02/26/hello-world/"/>
    <id>https://huangwanling.gitee.io/ayla/2022/02/26/hello-world/</id>
    <published>2022-02-26T08:24:41.649Z</published>
    <updated>2022-03-05T16:25:10.313Z</updated>
    
    <content type="html"><![CDATA[<p>这是搭建博客后的第一篇文章，该博客主要分享和记录自己学习前端的心得，不定期更新。<br>保留下方hexo的相关命令，以防自己忘记的时候方便查看</p><span id="more"></span><h3 id="Create-new-blog"><a href="#Create-new-blog" class="headerlink" title="Create new blog"></a>Create new blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是搭建博客后的第一篇文章，该博客主要分享和记录自己学习前端的心得，不定期更新。&lt;br&gt;保留下方hexo的相关命令，以防自己忘记的时候方便查看&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
